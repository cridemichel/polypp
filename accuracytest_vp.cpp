#include <stdlib.h>
#include <stdio.h>
#define CPOLY
#ifdef CPOLY
#include "./cpolyvp.hpp"
#else
#include "./rpolyvp.hpp"
#endif
#include<iostream>
#include<fstream>
#include<complex>
#include<list>
#include<string>
#include <iomanip>
using namespace std;
#define WP 1000
#define WPO 50
#include <boost/multiprecision/mpc.hpp>
#include <boost/multiprecision/mpfr.hpp>
using namespace boost;
using namespace boost::multiprecision;
using namespace boost::multiprecision::backends;
using vldbl=mpfr_float;
using cmplx=mpc_complex;
using pdbl=mpfr_float;
using pcmplx=mpc_complex;
//template <int N, int digits=200>
//using rpolymp = rpoly<number<mpfr_float_backend<digits>>,N,false,number<mpc_complex_backend<digits>>>;
#define Complex(x,y) cmplx("x","y"))
bool allreal=false, doswap=false;
#undef M_PI
#define M_PI 3.1415926535897932384626433832795029L
#define PRINTOUT_COEFF
using numty = vldbl;
vldbl *c;
cmplx *er;
void calc_coeff(vldbl c[], cmplx er[]);
numty gauss(void)
{
  numty  a1=3.949846138, a3 = 0.252408784, a5 = 0.076542912, 
    a7 = 0.008355968, a9 = 0.029899776;
  numty sum, r, r2;
  int i;

  sum = 0.0;

  for(i=0; i < 12; i++)
    {
      sum = sum + drand48();
    }
  
  r  = ( sum - 6.0 ) / 4.0;
  r2 = r * r;

  return  (((( a9 * r2 + a7 ) * r2 + a5 ) * r2 + a3 ) * r2 + a1 ) * r;

}
int NDEG=0;
void calc_coeff_dep_on_case(int CASO)
{
  int i;
  if (CASO==1)
    {
      // wilkinson
      NDEG=10;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      allreal=true;
      for (i=0; i < NDEG; i++)
        { 
          er[i] = i+1;
        }
      calc_coeff(c, er);
    }
  else if (CASO==2)
    {
      // wilkinson
      //
      NDEG = 15;
      allreal=true;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      for (i=0; i < NDEG; i++)
        { 
          er[i] = i+1;
        }
      calc_coeff(c, er);
    }
  else if (CASO==3)
    {
      NDEG = 20;
      allreal=true;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      for (i=0; i < NDEG; i++)
        { 
          er[i] = i+1;
        }
      calc_coeff(c, er);
    }
  else if (CASO==4)
    {
      NDEG = 20;
      allreal=true;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      er[0] = vldbl(-2.1L);
      for (i=1; i < NDEG; i++)
        { 
          er[i] = er[i-1]+vldbl(0.2L);
        }
      calc_coeff(c, er);
    }
  else if (CASO==5)
    {
      NDEG = 10;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      allreal=true;
      for (i=1; i < NDEG+1; i++)
        { 
          er[i-1] = vldbl(1.0L)/vldbl(i);
        }
      calc_coeff(c, er);
    }
  else if (CASO==6)
    {
      NDEG = 15;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      allreal=true;
      for (i=1; i < NDEG+1; i++)
        { 
          er[i-1] = vldbl(1.0L)/vldbl(i);
        }
      calc_coeff(c, er);
    }
  else if (CASO==7)
    {
      NDEG = 20;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      allreal=true;
      for (i=1; i < NDEG+1; i++)
        { 
          er[i-1] = cmplx(1.0)/cmplx(i);
        }
      calc_coeff(c, er);
    }
  else if (CASO==8)
    {
      NDEG = 20;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];
 
      allreal=true;
      for (i=0; i < NDEG; i++)
        { 
          er[i] = vldbl(1.0L)/pow(vldbl(2),NDEG/2-i);
        }
      calc_coeff(c, er);
    }
  else if (CASO==9)
    {
      NDEG = 20;
      allreal=true;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      for (i=0; i < NDEG; i++)
        { 
          er[i] = 1.0L/pow(((vldbl)2),NDEG/2-i)-3.0L;
        }
      calc_coeff(c, er);
    }
  else if (CASO==10)
    {
      NDEG = 20;
      allreal=true;
      doswap=true;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      static complex<long double> erl[20]=

        {-0.98883082622512854506974288293400861L - 
          0.14904226617617444692935471527721756L*1il, \
            -0.98883082622512854506974288293400861L + 
            0.14904226617617444692935471527721756L*1il, \
            -0.90096886790241912623610231950744505L - 
            0.43388373911755812047576833284835875L*1il, \
            -0.90096886790241912623610231950744505L + 
            0.43388373911755812047576833284835875L*1il, \
            -0.73305187182982632852243148927067191L - 
            0.68017273777091939018735870103374024L*1il, \
            -0.73305187182982632852243148927067191L + 
            0.68017273777091939018735870103374024L*1il, \
            -0.50000000000000000000000000000000000L - 
            0.86602540378443864676372317075293618L*1il, \
            -0.50000000000000000000000000000000000L + 
            0.86602540378443864676372317075293618L*1il, \
            -0.22252093395631440428890256449679476L - 
            0.97492791218182360701813168299393122L*1il, \
            -0.22252093395631440428890256449679476L + 
            0.97492791218182360701813168299393122L*1il, 
          0.07473009358642425429093974573476665L - 
            0.99720379718118014822502987087811927L*1il, 
          0.07473009358642425429093974573476665L + 
            0.99720379718118014822502987087811927L*1il, 
          0.36534102436639501454473799892976880L - 
            0.93087374864420425563779924195127531L*1il, 
          0.36534102436639501454473799892976880L + 
            0.93087374864420425563779924195127531L*1il, 
          0.62348980185873353052500488400423981L - 
            0.78183148246802980870844452667405775L*1il, 
          0.62348980185873353052500488400423981L + 
            0.78183148246802980870844452667405775L*1il, 
          0.82623877431599487194516257377267840L - 
            0.56332005806362202774926153802976051L*1il, 
          0.82623877431599487194516257377267840L + 
            0.56332005806362202774926153802976051L*1il, 
          0.95557280578614073281133405376746667L - 
            0.29475517441090421683077298196019097L*1il, 
          0.95557280578614073281133405376746667L + 
            0.29475517441090421683077298196019097L*1il};  
      for (i=0; i < NDEG; i++)
        er[i]=cmplx(erl[i]);

      calc_coeff(c, er);
    }
  else if (CASO==11)
    {
      NDEG = 20;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      static complex<long double> erl[20]=
        {-0.98883082622512854506974288293400861L- 
          0.14904226617617444692935471527721756L*1il, 
          -0.98883082622512854506974288293400861L+ 
            0.14904226617617444692935471527721756L*1il, 
          -0.90096886790241912623610231950744505L- 
            0.43388373911755812047576833284835875L*1il, 
          -0.90096886790241912623610231950744505L+ 
            0.43388373911755812047576833284835875L*1il, 
          -0.73305187182982632852243148927067191L- 
            0.68017273777091939018735870103374024L*1il, 
          -0.73305187182982632852243148927067191L+ 
            0.68017273777091939018735870103374024L*1il, 
          -0.50000000000000000000000000000000000L- 
            0.86602540378443864676372317075293618L*1il, 
          -0.50000000000000000000000000000000000L+ 
            0.86602540378443864676372317075293618L*1il, 
          -0.22252093395631440428890256449679476L- 
            0.97492791218182360701813168299393122L*1il, 
          -0.22252093395631440428890256449679476L+ 
            0.97492791218182360701813168299393122L*1il, 
          0.07473009358642425429093974573476665L- 
            0.99720379718118014822502987087811927L*1il, 
          0.07473009358642425429093974573476665L+ 
            0.99720379718118014822502987087811927L*1il, 
          0.36534102436639501454473799892976880L- 
            0.93087374864420425563779924195127531L*1il, 
          0.36534102436639501454473799892976880L+ 
            0.93087374864420425563779924195127531L*1il, 
          0.62348980185873353052500488400423981L- 
            0.78183148246802980870844452667405775L*1il, 
          0.62348980185873353052500488400423981L+ 
            0.78183148246802980870844452667405775L*1il, 
          0.82623877431599487194516257377267840L- 
            0.56332005806362202774926153802976051L*1il, 
          0.82623877431599487194516257377267840L+ 
            0.56332005806362202774926153802976051L*1il, 
          0.95557280578614073281133405376746667L- 
            0.29475517441090421683077298196019097L*1il, 
          0.95557280578614073281133405376746667L+ 
            0.29475517441090421683077298196019097L*1il};
      doswap=true;
      allreal=true;
      for (i=0; i < NDEG; i++)
        er[i]=cmplx(erl[i]);

      calc_coeff(c, er);
    }
  else if (CASO==12)
    {
      NDEG = 24;
      doswap=true;
      allreal=true;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      static cmplx erl[24];

      erl[0]=cmplx("-3.52E2","0");
      erl[1]=cmplx("-3.52E2", "0");
      erl[2]=cmplx("-2.8371450777E2", "-2.9920517772E2");
      erl[3]=cmplx("-2.8371450777E2", "2.9920517772E2");
      erl[4]=cmplx("-2.7867414048E2", "6.1005469197E2");
      erl[5]=cmplx("-2.7867414048E2", "-6.1005469197E2");
      erl[6]=cmplx("-2.74892372E2", "0");
      erl[7]=cmplx("-2.014171531E2", "0");
      erl[8]=cmplx("-1.255366582E2", "0");
      erl[9]=cmplx("-9.599999999E1", "0");
      erl[10]=cmplx("-8.8692435121E1", "5.5009607430E2");
      erl[11]=cmplx("-8.8692435121E1", "-5.5009607430E2");
      erl[12]=cmplx("-1.6000000000E1", "0");
      erl[13]=cmplx("8.23178509855E1", "0");
      erl[14]=cmplx("8.8692435121E1", "-5.50096074303E2");
      erl[15]=cmplx("8.8692435121E1", "5.50096074303E2");
      erl[16]=cmplx("1.9293739373E2", "1.60865921259E3");
      erl[17]=cmplx("1.9293739373E2", "-1.60865921259E3");
      erl[18]=cmplx("2.0141715312E2", "0");
      erl[19]=cmplx("2.7489237213E2", "0");
      erl[20]=cmplx("7.52E2", "0");
      erl[21]=cmplx("7.52E2", "0");
      erl[22]=cmplx("9.1106065E2", "1.5722");
      erl[23]=cmplx("9.1106065E2", "-1.5722");
      for (i=0; i < NDEG; i++)
        er[i]=erl[i];
      calc_coeff(c, er);
    }
  else if (CASO==13)
    {
      NDEG = 12;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      //roots and coefficients were calculated by Wolfram Mathematica with a precision of 1000 digits
      //print*, "Vanni Noferini's example degree 12 or 35"
      for ( i=0; i < NDEG; i++)
        {
          er[i]=gauss();
        }
      er[0] *= 1E9;
      er[1] *=1E12;

      calc_coeff(c, er);
    }
  else if (CASO==14)
    {
      // Noferini
      NDEG=35;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      //roots and coefficients were calculated by Wolfram Mathematica with a precision of 1000 digits
      //print*, "Vanni Noferini's example degree 12 or 35"
      for ( i=0; i < NDEG; i++)
        {
          er[i]=gauss();
        }
      er[0] *= 1E9;
      er[1] *=1E12;

      calc_coeff(c, er);

    }
  else if (CASO==15)
    {
      NDEG = 10;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      allreal=true;
      er[0]=vldbl(0.1);
      for (i=1; i < NDEG; i++)
        { 
          er[i] = er[i-1]/vldbl(10.0L);
        }
      calc_coeff(c, er);
    }
  else if (CASO==16)
    {
      NDEG = 20;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      allreal=true;
      er[0]=vldbl(0.1);
      for (i=1; i < NDEG; i++)
        { 
          er[i] = er[i-1]/vldbl(10.0L);
        }
      calc_coeff(c, er);
    }
  else if (CASO==17)
    {
      NDEG = 60;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];

      int ii;
      int m=15;
      vldbl pi = 2.0*acos(vldbl(0.0));
      for  (ii=-m+1; ii <= 0; ii++)
        er[m-1+ii]= vldbl("0.9")*exp(cmplx("0",vldbl(ii)*pi/vldbl("2.0")/vldbl(m)));
      for  (ii=1; ii <= m; ii++)
        er[m-1+ii] = conj(er[m-ii]);
      for  (ii=m+1; ii <= 2*m; ii++)
        er[m-1+ii] = exp(cmplx(0,vldbl(ii)*pi/vldbl("2.0")/vldbl(m)));
      for  (ii=2*m+1; ii <= 3*m; ii++)
        er[m-1+ii] = conj(er[5*m-ii]);
      calc_coeff(c, er);
    }
  else if (CASO==18)
    {
      NDEG = 20;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];
      er[0]=1;
      for (i=1; i < NDEG; i++)
        { 
          er[i] = er[i-1]/vldbl("10.0");
        }
      calc_coeff(c, er);
    }
  else if (CASO==19)
    {
      NDEG=20;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];
      er[0]=vldbl("1E-15");
      for (i=1; i < NDEG; i++)
        { 
          er[i] = vldbl("1000.0");
        }
      calc_coeff(c, er);
    }
  else if (CASO==20)
    {
      NDEG=21;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];
      er[0]=vldbl("1E-15");
      for (i=1; i < NDEG-1; i+=2)
        { 
          er[i] = vldbl(1000*i);
          er[i+1] = er[i];
        }
      calc_coeff(c, er);
    }
  else if (CASO==21)
    {
      NDEG=20;
      c = new vldbl[NDEG+1];
      er = new cmplx[NDEG];
      er[0]=vldbl("1E-15");
      for (i=1; i < NDEG; i++)
        { 
          er[i] = vldbl("1000.0")+vldbl("1E-18")*vldbl(drand48());
        }
      calc_coeff(c, er);
    }
  
}

int factorial(int n)
{
  return (n == 1 || n == 0) ? 1 : factorial(n - 1) * n;
}
void sort_sol_opt(cmplx csol[], cmplx exsol[], vldbl allrelerr[])
{
  int k1, k2, k2min=0;
  int perm[NDEG];
  vldbl relerr, relerrmin, relerrmax;
  cmplx diff, solt[NDEG];
  bool used_exsol[NDEG];
  for (k1=0; k1 < NDEG; k1++)
    used_exsol[k1]=false;

  for (k1=0; k1 < NDEG; k1++)
    {
      bool ini = true;
      for (k2=0; k2 < NDEG; k2++)
        {
          if (used_exsol[k2]==true)
            continue;
          diff = csol[k1] - exsol[k2];
          relerr = (exsol[k2]==cmplx(0.0,0.0))?abs(diff):abs(diff/exsol[k2]);
          if (ini==true || relerr <= relerrmin)
           {
             ini=false;
             k2min=k2;
             relerrmin = relerr;
           } 
        }
      perm[k1] = k2min;
      //cout << "perm[" << k1 << "]=" << k2min << "\n";
      allrelerr[k2min] = relerrmin;
      used_exsol[k2min]=true;
    }

  for (k1=0; k1 < NDEG; k1++)
    solt[k1] = csol[k1];

  for (k1=0; k1 < NDEG; k1++)
    csol[perm[k1]] = solt[k1];
}
numty print_accuracy_at(char *str, cmplx csol[], cmplx exsol[], vldbl allrelerr[])
{
  /* we follow FLocke here */
  int k1;
  vldbl relerrmax;
  for (k1=0; k1 < NDEG; k1++)
    {
      if (k1==0 || allrelerr[k1] > relerrmax)
        {
          relerrmax=allrelerr[k1];
        }
    }

  //printf("[%s] relative accuracy=%.16LG\n", str, relerrmax);
  cout << setprecision(WPO) << "[" << str << "relative accuracy=" <<  relerrmax << "]\n";
  return relerrmax;
}

void print_roots(char *str, cmplx er[], cmplx cr[], vldbl allrelerr[])
{
  printf("CASE %s\n", str);
  for (auto i=0; i < NDEG; i++)
    {
#if 0
      cout << setprecision(WPO) << er[i] << "\n";
#else
      cout << setprecision(WPO) << "root #" << i << " EX: "<< er[i] << " C:" << cr[i];
      cout << setprecision(WPO) << " [ eps: " << allrelerr[i] << " ]\n"; 
#endif
    }
}

void print( list<int> l){
    for(list<int>::iterator it=l.begin(); it!=l.end() ; ++it)
            cout << " " << *it;
    cout<<endl;
}


void calc_coeff(vldbl co[], cmplx er[])
{
  vldbl alpha, beta, zero;
  int ii, jj;
  vldbl *rr, *ir, *c;
  rr = new vldbl[NDEG];
  ir = new vldbl[NDEG];
  c = new vldbl[NDEG+1];
  zero = 0.0;
  for (ii=0; ii < NDEG; ii++)
    {
      rr[ii] = er[ii].real();
      ir[ii] = er[ii].imag();
      c[ii]  = 0.0;
    }
  c[NDEG]=1.0;
  ii=0;
  
  while (ii < NDEG)
    { 
      if (ir[ii] == zero) 
        {
          alpha = -rr[ii];
          for (jj=ii; jj >= 0; jj--)
            {         
              //do jj=ii,1,-1
              if (jj==0)
                c[jj] = c[jj] + alpha;
              else
                c[jj] = c[jj] + alpha*c[jj-1];
            }
          ii=ii+1;
        }
      else
        {
          alpha = -rr[ii]*2.0;
          beta = rr[ii]*rr[ii] + ir[ii]*ir[ii];
          for (jj=ii+1; jj >= 0; jj--)
            { 
              //cout << "jj=" << jj << "\n";
              //do jj=ii+1,1,-1
              if (jj == 1)
                {
                  c[jj] = c[jj] + alpha*c[jj-1] + beta;
                }
              else if (jj == 0) 
                {
                  c[jj] = c[jj] + alpha;
                }
              else 
                c[jj] = c[jj] + alpha*c[jj-1] + beta*c[jj-2];
            }
          ii=ii+2;
        }
    }
  for (ii=0; ii < NDEG; ii++)
     co[ii] = c[NDEG-ii-1];
  co[NDEG]=1.0;
#ifdef PRINTOUT_COEFF
  fstream f;
  f.open("coeff.dat", ios::out|ios::trunc);
  for (ii=0; ii < NDEG+1; ii++)
    f << setprecision(WP) << co[ii] << "\n";
  f.close();
#endif
  delete [] ir;
  delete [] rr;
  delete [] c;
}

int main(int argc, char *argv[])
{
  numty::default_precision(WP);
  cmplx::default_precision(WP);

  char testo2[256];
  int i, CASO;

  if (argc == 2)
    {
      CASO = atoi(argv[1]);
    }
  else
    {
      CASO = 1;
    }
  if (CASO < 1 || CASO > 21)
    {
      printf("Case must be between 1 and 21\n");
      exit(-1);
    }
  calc_coeff_dep_on_case(CASO);

  cout << "NDEG=" << NDEG << "\n";
  pvector<pcmplx> roots(NDEG);
  cmplx* cr = new cmplx[NDEG];
  numty *allrelerr= new numty[NDEG];
  srand48(0);

#ifdef CPOLY
  pvector<pcmplx> ca(NDEG+1);
  for (i=0; i < NDEG+1; i++)
    ca[i]=pcmplx(vldbl(c[i]),0.0);
  cpolyvp<pcmplx,pdbl> rp(NDEG);
#else
  pvector<pdbl> ca(NDEG+1);
  for (i=0; i < NDEG+1; i++)
    ca[i]=pdbl(c[i]);
  rpolyvp<pdbl,pcmplx> rp(NDEG);
#endif
  //rp.set_initial_precision(WPO+10); // if initial precision is not provided is automatically estimated
  rp.set_output_precision(WPO);
#if 0
  ca << vldbl("1000000000000000000008346962541009034453086.821697296219179045046664484901942729446473956048117740458953643474283644635648427289702690053362616897959318798131088532061302824628797564925448818221632219767823743930148192581238368450445770157185564480609867928657144253709133125312916217027452267645094110359105442920048520368367423677222738786320246884150013418829955593995865248232724169657996788692277236120476941464903712177328943231179820712168053492847463526530351288676696083990319434380668869649890291677456096520399136065564336307089427040150435183615062329416114050680007979867551225440163846881756836976164781428557814790849151391717448891603146750719324984029015532003519364330286182971748778594064103064576276958571593213051337206935747315307688037855195561369701223801781119110384151791246973809129219150278801650356317872437694655163232807467865667292396849279493678819575608949278180730505261869837032973519728281868552953767803628000425846014167231535754872088717413857920636083615136692"),
vldbl("-1000000000000000019008346962541009034603332147435458839334.575498101477180491988326603702319474494594286598994465446231611759466739211376838159456027086193428063123887573503353178932203579504829346481776583961243673875510553027502834409998146026737727026929453267245741205452026295022386425313587460495493424991225468432920774243835325505410162715472073030753074232538557437520668677965711966346458742361539955894304631364814093067820882330139858396979575274469627554257048870442732825975056282145731992647692232253131728734161145993335648476544273770760048921879396890556784926390580450665305561722999909678728593282016134597286162653365077320934502373392570061999526285001732870683329605892492727995545071859498346171902128919499076121934924711018160923862645668497028262086788438093053731547581604832988861445661251442772906135358685721946126920112553755282918669620500547951362602132476151643117200129443503252430616991311395959070769236917343842158035472512728276159171509380294310390242425699673"),
vldbl("19000000000000000171150245325738162621432615720211374549.87099283487229347230026303510144919767866304095990895804968490585951712692111179501786765158938225264265600602982283668202291403147976593293235023858178441332198639545610629270778715391693934368960038669494663649063985311704752951791813627756702881142528902305253341072912412141645216042413758334341543333997075393180104645618658377597584632308600421920750391661131806008842141721928511449110704095006475392322347603133537177173825547538075316185217792770386858235943126083113180090086693029248649104990182204039159885189762499587532381865949824590722803210217692978743085362387525480203661603553131760688751275559719838707345521331686809411409013775116811668042605381609368853908345274017263440519617111502721113499836706776949001326030637267869965597961648619099305565657951709844646538856525558077943189951179918350116580112215226156176585569973318557967190492987351053365397389329154976119834720354861082397500813381433373430932886199674428"),
vldbl("-171000000000000000970277085268774382278132855388205919.3146579572852120138599945542218666627017116126196680765822981187083580591222223722418135823612166668492207396251399335193592983144922938112315338941149022736353897901942477405939736281044833441928388769785026438780108980386132639927016914669047438165510658375043590519793145744664389276978658107793909919131183581019299892960869324456654258150682808287705361819443697243638876171052310561185953177144458097829289516330230720919056105860709443361111065697018296754035538165329265414158527364967318818237928917041512998672961325885753555086282587566175576602348523548534802185858583501881396778390066061720255120097358004493716826271087119487734593651630738519659317398713806535003278572303625513577480680938113709805518078776039812576870192780284145288678892200370785433428033642544521758564312875469138589162935534051294840900409502809897038561061986670659104552659685632858985252693748496234930856574724363036988774362599016185902932764291946811"),
vldbl("969000000000000003882811121433463372139256153760931.1656089213765728455432705609684130198141021388422844137290258905262682928532126711703820338509788852710576161871663957639194498845317882349496126745649874030697239465009877577697900168660411698637859697212537188852865304706224846794595486559140788461786753735310070960156885949418453828902330726312924700137032801006770920249099557770421068412355984573895946392721178028007003276036798986668905256443021037181219199962054693346167919581932456741926555184555568379382675943372149317696154315560475037875254934685427325947059679299390174001612238076337968642442561120678592681902641767322456326965955497066352960764141430939541788434099665678845317657954893798598437238968742462164092890691026326829401040905169507400034806835071750095540436501748082347602462159166320499400821341874372026875890440937547507680744810231587052044742391010679956507456799974661245601766944845034054163622371265331927730912927133496737884645533060619384365201011995730539"),
vldbl("-3876000000000000011653541705375487645497940458847.34086454383344058604131133169840664758448394628453284094299517402667173866308518365177872592670803900993864084047526069896181011522577879634521160542884151323946449561596742326727630200338319225408804993975605659647836026219647439299663088321140689619827502618394914351256353687851855660832027684617534716558922861363242689104763004904639518193084584361864738473889980817804198480612834272095117558574271995940610463122626045986949123487428489249845425847204752164691848878770464356440610782484492844899650697996010105646083523924404441024336026031752168565635616774621867457737099822754619670944641421984757353348397370865308444483400117824521774200142585516347048174464098019313697539768118193164391777305556887813020184089811789376372725929201480691691034755486101217719795277453390118109130437536746139648784597974284950419187590496374016221746774965920459560795394756865399904676376607221612803984282975127703054649877415480600429298525810839493"),
vldbl("11628000000000000027203516775051365407348923933.82159731482990798222088107644670612664270143075402439155550463769597372702469631822981350546175412174424847193317987546613714622380324122480087032410002407838171783268106059212674733394057827178507804377670683849127252902687319021832308769628282277137493019962292681844041830563715092869779039163234987033188857745773299592932063449356867983082163221571562016272957382961687000612157068299638059889364070368066730599676920540711065768819075363194148797762017434984187871073939219560080258662079849559659356817701634662582169390080903681609734398478412853412401933880913330779022710192242082411014774335930526966417601673712065505268857071153977456363323639904463695905367254174957739990000886904383068682554306928380599796524265633482489100461259097082498690333012215975433427526602847586476276227200689496669009980765976132179080850968978457492260413662001255138609429838817787943028303487835728446952998638153076171875"),
vldbl("-27132000000000000050542953012611291715852537.379454144667898487644217843145472254763018322875649763471361285307920457325538468617641334439668082608991306072887916349274193506835507808635386275974189269556603794295880273718184850039008318623839049026270605465295590495424049597284038822642249427659585698169889872764144422513425953897578355627545003951672483826241453642861443828034624932929605572004931423763251066967438128661514555531092454449206871965705958450947680663760304933142831296382661669357028480002031319007339665901312896324949144625915012636222559031286290096553945874915606703114638276394860474584291669661202457908571439168753597573407798724541182697841799700500688992273784889170221729233182613842108616904019976589278996510005734873539695330158126361121397534796019637183481819851107406168543146944933031855689902380636712082600455698470735821370425355780753307044506072998046875"),
vldbl("50388000000000000075847633735905071512799.881171685160493999595060253204024501088721577040982937438423857077695453260984557899440617536116780037767886992180578853842718876925821977360981116699609382793682355215986873308786818327414695816935732946560176725882535196746847851684925278858520004859777833377951631179556632042045240989293204745545305320050976850663574083864907555898732875561463152344538596324643223176828128457473501656630732051337451965152853218781956280005001080447755731193465951931542313514013179268538991359704146884564133382449859366512179427832763916744134488034340581595145220979498350864870318804363312067775007134219204087228348816955929695652062555247852338438434914372971520202047760324301695553718972548660120550025145754124936273705518272632510009557257619943805050655161181794028379954397678375244140625"),
vldbl("-75582000000000000092743246386869473330.00337353147846937647771036265434646037812031120891279081910685563230596214129459391965978041271898245421904553839857353578063761383430987663826455949639975175984724799130350345962959709878299763897356927662605934211860256393295687295647837397122314994177802823727399404316642254160562382167089651949558963304983249290638821684660379619527320019346201724953346624006469874656432264314828098639137185591679554886095797168147636860760391031616542628033106233599633489924332226682623373024969745751094002312420069098463374397970944492804493833842456227139320324418286119528366396115907391700508392455383112843096878787419264417053135244133379322029145074641242868141879760275606459259123415250769539852626621723175048828125"),
vldbl("92378000000000000092783829318743859.25547354149392241820924850988879650144454200897468996259290622430666864135437430705823052653344892067009385168338882509051534470148686536036229708990164242431722605497679579172561292502390987580803400377905290134187075866537292965353084478277010292154424683769863246853567264826090742201305884835358214420899898650354885572590498425707247359519144561506353147838686350612536530268969403979459550605438491966509601181804207347626280818162426168216377809978149968826800543412930635551818088427580019249977213004151721714348782576268103635634433378056766737248779210485406279367214339518450115056751447433047888516147942272044302214339950296562165021896362304687499999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"),
vldbl("-92378000000000000075947246386869.47332986302071586576217443701208498962802916813876755613911195130845713938509592093654488846861088582928575643739951121279033915444896725767798194404343868987382448131886487994182909529779498469693032920135854622502402220484798882729376276799583416659873416456798552631220332477219980606464270430678267283081248103205727204927443708263513371386501074197207085353032772253809552408483948529542137439474926461744037297088456954031901370596816647137128817317980741673228590157208183244420864912750613810696538555377117972500395819120913296229485306946963354968183068649523193016648292541503906249999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"),
vldbl("75582000000000000050653633735.905071512589359095210368757273395462866895974680604630627772264008689606952602442288812355293366106162206755795169384007037663440191665430479223248858613310260922083453590871838944375142141544363344055112225125482043188098540718960965072273295642797787018314774120314315160310839880100922523697117058450499908634417612995525674480080758573291571004510285421181635609436740139960676834633427895950270639687456790029926719929904160644830081802188641781060636371954206207355104492434143205643881646693671427783556282520294189453125"),
vldbl("-50388000000000000027286953.01261129171565822030416090470528176158372397355639871287065087378261816386168701222023385784967162154708818149893169081043448755979932823559894612883956871100353368319645400634315635423593837195439357691134492467043231084219195625627826639510742728085670658800778817462749411007628259979562530045649116775244257448994559837534611676815173936557241815168114925296599793871277366063367507780752486523575862957880766297528996044974292090046219527721405029296875"),
vldbl("27132000000000000011699.51677505136540721938947923838779397648747702504743838976385413593520916402564022098828201725877477060415358573677651460783708969488920044772171216341397500501626699427638421494348449576763637947447803346940239483635829405184021765707398606538059350099932967903820800195617576079011072794697477697466778131354037606543260780030544588025400142846091505462007009708003124615061096847057342529296875"),
vldbl("-11628000000000000003.901541705375487645433179828735061396118521174859604120298139477656000431168090278179220116238729143718532713000858725296982238412001256640681450328051076994756538591838020253186632493715714133023696302169518359060722656535576672046007308549517692429383676912764007345971027425354259502397746839363890103413723409175872802734375"),
vldbl("3876000000000000.00097581112143346337211497394117601712378340335424152642613064446503704229237423966377417494213751493719370621262967936581022796405105836702284382055734455701737313868808382327613595056770171246772413786755669164759061898380132493713290386949665844440460205078125"),
vldbl("-969000000000.00000017227708526877438227146813092587428948694584789573984795808448607487614892491369846410162988162627636213609707646109430073335134437406116813268765024236284233438709634356200695037841796875"),
vldbl("171000000.000000000019150245325738162620163359988148566646225483241080944392778576155939469752414994717371055088506182073615491390228271484375"),
vldbl("-19000.0000000000000010083469625410090344530544825829565525054931640625"),
vldbl("1");
#endif
  rp.set_coeff(ca);
  rp.show("p(x)=");
  rp.find_roots(roots);
  sprintf(testo2, "OPS");
  for (i=0; i < NDEG; i++)
    cr[i] = cmplx(roots[i]);
  // sort roots and calculate relative error
  cout << "roots calculated, sorting...\n";
  sort_sol_opt(cr, er, allrelerr);
  print_roots(testo2, er, cr, allrelerr);
  cout << "Forward relative error:\n";
  print_accuracy_at(testo2, cr, er, allrelerr);
  return 0;
}
